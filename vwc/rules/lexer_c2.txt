#Rule

global tokens("^%import" "%enum" "%declare_function" "%declare_variable")

number tokens("@number")
string tokens("@string")
identifier tokens("@identifier")

import tokens("import" "@declaration" "@set_url" ". %identifier" "?%pseudoname" ";" "@add_type")
pseudoname tokens("as" "%identifier")

enum tokens("enum" "{" ", %enum_value" "}" ";")
enum_value tokens("%identifier" "?%enum_assign")
enum_assign tokens("=" "%constant")

constant tokens("%expression")

type_reference tokens(".*" "@type_reference")
type tokens("%identifier" "@set_type" "%?type_reference")
initialization tokens("=" "%expression" "@set_symbol_ast")
static tokens("static" "@set_static")
public tokens("public" "@set_public")
parameter tokens("%type" "%identifier")

declare_function tokens("@declaration" "?%static" "?%public" "%type" "%identifier" "(" "@set_function" "@add_member" ", ?%parameter" ")" "%block_statements" "@set_symbol_ast")
declare_variable_loop tokens("%identifier" "@add_member" "?%array_scope" "?%initialization")
declare_variable tokens("@declaration" "?%static" "?%public" "%type" ", %declare_variable_loop" ";")
declare_local tokens("@declaration" "?%static" "%type" ", %declare_variable_loop" ";")

call tokens("(" "?, %expression" ")")
variable tokens("%identifier" "@add_variable")
sizeof tokens("sizeof" "(" "%expression" ")")
array_scope tokens("[" "%expression" "]")
unary tokens("^%number" "%string" "%sizeof" "%variable")
indirection tokens("\\." "%identifier")
postfix tokens("^\\++" "\\--" "%indirection" "%call" "%array_scope")

#Lexer

c2 files("*.c2")
 binary "||" ConditionOr
 binary "&&" ConditionAnd
 binary "&" BinaryAnd
 binary "|" BinaryOr
 binary "^" BinaryXor
 unary "-" UnaryNeg