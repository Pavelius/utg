#Rule

global tokens("^%import" "%enum" "%declare_function" "%declare_variable")

number tokens("@number")
string tokens("@string")
identifier tokens("@identifier")

import tokens("import" "@declaration" "@begin_string" ". %identifier" "@set_url" "?%pseudoname" ";" "@add_type")
pseudoname tokens("as" "%identifier")

enum tokens("enum" "{" ", %enum_value" "}" ";")
enum_value tokens("%identifier" "?%enum_assign")
enum_assign tokens("=" "%constant")

constant tokens("%expression")

type_reference tokens(".*" "@type_reference")
type tokens("%identifier" "@set_type" "%?type_reference")
initialization tokens("=" "%expression" "@set_symbol_ast")
static tokens("static" "@Static.set_flag")
public tokens("public" "@Public.set_flag")
parameter tokens("%type" "%identifier")

declare_function tokens("@declaration" "?%static" "?%public" "%type" "%identifier" "(" "@Function.set_flag" "@add_member" ", ?%parameter" ")" "%block_statements" "@set_symbol_ast")
declare_variable_loop tokens("%identifier" "@add_member" "?%array_scope" "?%initialization")
declare_variable tokens("@declaration" "?%static" "?%public" "%type" ", %declare_variable_loop" ";")
declare_local tokens("@declaration" "?%static" "%type" ", %declare_variable_loop" ";")

call tokens("(" "?, %expression" ")")
variable tokens("%identifier" "@add_variable")
sizeof tokens("sizeof" "(" "%expression" ")")
array_scope tokens("[" "%expression" "]")
indirection tokens("\\." "%identifier")

unary tokens("^%number" "%string" "%sizeof" "%variable")
postfix tokens("^\\++" "\\--" "%indirection" "%call" "%array_scope")
expression tokens("@expression")
assigment tokens("%variable" "=" "%expression" ";")
statement_expression tokens("%expression" ";")

block_statements tokens("{" "@push_locals" ".?%single_statement" "@pop_locals" "}")
single_statement tokens("^%block_statements" ";" "%statement")
statement tokens("^%return" "%if" "%while" "%switch" "%break" "%case" "%default" "%declare_local" "%assigment" "%statement_expression")

break tokens("break" ";")
default tokens("default" ":")
case tokens("case" "%expression" ":")
while tokens("while" "(" "%expression" "@add_left" ")" "%single_statement" "@While.set_op")
if tokens("if" "(" "%expression" ")" "%single_statement")
switch tokens("switch" "(" "%expression" ")" "%block_statements")
return tokens("return" "%expression" ";")

#Lexer

c2 files("*.c2")